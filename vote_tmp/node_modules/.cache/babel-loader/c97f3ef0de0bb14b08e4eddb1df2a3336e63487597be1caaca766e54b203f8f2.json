{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"vote-result\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $props.pollResults ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[0] || (_cache[0] = _createElementVNode(\"h3\", null, \"Results:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.pollResults, (votes, option) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: option\n    }, _toDisplayString(option) + \": \" + _toDisplayString(votes) + \" votes \", 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"names":["key","class","$props","pollResults","_createElementBlock","_hoisted_1","_createElementVNode","_Fragment","_renderList","votes","option","_toDisplayString","_createCommentVNode"],"sources":["C:\\Users\\Алексей\\Desktop\\Projects\\vue-tmp\\vote_tmp\\src\\components\\VotePollResult.vue"],"sourcesContent":["<template>\r\n  <div class=\"vote-result\" v-if=\"pollResults\">\r\n    <h3>Results:</h3>\r\n    <ul>\r\n      <li v-for=\"(votes, option) in pollResults\" :key=\"option\">\r\n        {{ option }}: {{ votes }} votes\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: ['pollResults']\r\n};\r\n</script>\r\n"],"mappings":";;EAAAA,GAAA;EACOC,KAAK,EAAC;;;SAAoBC,MAAA,CAAAC,WAAW,I,cAA1CC,mBAAA,CAOM,OAPNC,UAOM,G,0BANJC,mBAAA,CAAiB,YAAb,UAAQ,sBACZA,mBAAA,CAIK,c,kBAHHF,mBAAA,CAEKG,SAAA,QANXC,WAAA,CAIoCN,MAAA,CAAAC,WAAW,EAJ/C,CAIkBM,KAAK,EAAEC,MAAM;yBAAzBN,mBAAA,CAEK;MAFuCJ,GAAG,EAAEU;IAAM,GAAAC,gBAAA,CAClDD,MAAM,IAAG,IAAE,GAAAC,gBAAA,CAAGF,KAAK,IAAG,SAC3B;wCANNG,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}